/*
    Copyright (C) 2014-2016 de4dot@gmail.com

    This file is part of dnSpy

    dnSpy is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    dnSpy is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with dnSpy.  If not, see <http://www.gnu.org/licenses/>.
*/

using System.Collections.ObjectModel;
using System.Windows.Media;
using System.Windows.Media.TextFormatting;

namespace dnSpy.Contracts.Text.Formatting {
	/// <summary>
	/// Formatted line source
	/// </summary>
	public interface IFormattedLineSource {
		/// <summary>
		/// Gets the source text snapshot for which this source will provide formatted text
		/// </summary>
		ITextSnapshot SourceTextSnapshot { get; }

		/// <summary>
		/// Gets the top text snapshot for which this source will provide formatted text
		/// </summary>
		ITextSnapshot TopTextSnapshot { get; }

		/// <summary>
		/// Determines whether the formatter uses <see cref="TextFormattingMode.Display"/> for format text
		/// </summary>
		bool UseDisplayMode { get; }

		/// <summary>
		/// Gets the number of spaces between each tab stop
		/// </summary>
		int TabSize { get; }

		/// <summary>
		/// Gets the base indentation (in logical pixels) for all lines generated by this source
		/// </summary>
		double BaseIndentation { get; }

		/// <summary>
		/// Gets the width (in logical pixels) where the formatted text will be broken into multiple lines.
		/// The value 0.0 means that lines should never be broken
		/// </summary>
		double WordWrapWidth { get; }

		/// <summary>
		/// Gets the maximum auto-indent for wrapped lines.
		/// </summary>
		double MaxAutoIndent { get; }

		/// <summary>
		/// Gets the width of a column in pixels. This is used to determine the location of tab stops.
		/// </summary>
		double ColumnWidth { get; }

		/// <summary>
		/// Gets the nominal height of a line
		/// </summary>
		double LineHeight { get; }

		/// <summary>
		/// Gets the nominal height of the text above the baseline
		/// </summary>
		double TextHeightAboveBaseline { get; }

		/// <summary>
		/// Gets the nominal height of the text below the baseline
		/// </summary>
		double TextHeightBelowBaseline { get; }

		/// <summary>
		/// Gets the TextRunProperties used to render unclassified text
		/// </summary>
		TextRunProperties DefaultTextProperties { get; }

		/// <summary>
		/// Gets the <see cref="ITextAndAdornmentSequencer"/> used by this source
		/// </summary>
		ITextAndAdornmentSequencer TextAndAdornmentSequencer { get; }

		/// <summary>
		/// Formats the text and adornments in a <see cref="ITextSnapshotLine"/>
		/// </summary>
		/// <param name="visualLine">Visual snapshot line to format</param>
		/// <returns></returns>
		Collection<IFormattedLine> FormatLineInVisualBuffer(ITextSnapshotLine visualLine);
	}
}
